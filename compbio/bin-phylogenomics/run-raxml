#!/usr/bin/env python
# run RAxML with standard command-line interface

import optparse
import os
import subprocess
import sys
import time

from rasmus import treelib
from compbio import phylip, fasta
from compbio import phylorun as phy

o = optparse.OptionParser()
o.add_option("-m", "--model", dest="model", metavar="MODEL")
phy.add_common_options(o)
o.add_option("-u", "--usertree", dest="usertree", metavar="TREE_FILE")
o.add_option("-x", "--random", dest="random", action="store_true")
o.add_option("", "--fastboot", dest="fastboot", metavar="NUMBER")
o.add_option("-g", dest="grouping", metavar="GROUPING_FILE")
o.add_option("-r", dest="constraint", metavar="CONSTRAINT_FILE")

conf, files = phy.parse_common_options(o)

# raxml program name
PROG = "raxmlHPC"

if conf.grouping and conf.constraint:
    o.error("Cannot specify a bifurcating constraint tree (-r) " +\
            "AND a multifurcating constraint tree (-g) for the same run")

#=============================================================================

def run(args, outdir):
    """Run a program in a subprocess within a new directory"""
    curdir = os.getcwd()
    os.chdir(outdir)
    ret = subprocess.call(args)
    os.chdir(curdir)
    return ret


def setup_usertree(treefile, treefile2):
    usertree = treelib.read_tree(treefile)

    # save data
    data = dict((n.name, n.data) for n in usertree)

    # prepare usertree
    usertree2 = treelib.unroot(usertree, newCopy=True)
    for n in usertree2:
        n.data = {}

    usertree2.write(outdir + "/" + treefile2)

    return usertree, data


#=============================================================================

result = 0
for fn in files:
    basename = phy.get_basename(fn, conf)

    outdir = basename + conf.outputext
    phy.make_output_dir(outdir)
    align = fasta.read_fasta(basename + conf.alignext)
    labels = phylip.write_phylip_align(file(outdir + "/infile", "w"), align,
                                       False)

    # require minimium size of alignment
    if len(align) <= 2:
        continue

    # set user tree
    if conf.usertreeext:
        usertree_file = "usertree"
        usertree, data = setup_usertree(basename + conf.usertreeext,
                                        usertree_file)
    elif conf.usertree:
        usertree_file = "usertree"
        usertree, data = setup_usertree(conf.usertree, usertree_file)
    else:
        usertree = None
        usertree_file = None
        data = None

    # default model
    if conf.seqtype == "dna":
        if conf.model is None:
            conf.model = "GTRGAMMA"
    else:
        if conf.model is None:
            conf.model = "PROTGAMMAJTT"

    # basic arguments
    args = [PROG, "-s", "infile",
                  "-n", "out",
                  "-m", conf.model]

    # user tree
    if usertree_file:
        args.extend(["-t", usertree_file])

    # opttree
    if not conf.opttree:
        args.extend(["-f", "e"])

    # bootstrapping
    if conf.boot:
        args.extend(["-b", str(int(time.time())), "-N", str(conf.boot)])

    if conf.random:
        args.extend(["-x", str(int(time.time()))])

    if conf.fastboot:
        args.extend(["-f", "a",
                     "-N", str(conf.fastboot),
                     "-x", str(int(time.time()))])

    # (multifurcating) grouping constraint
    if conf.grouping:
        #shutil.copy(conf.grouping, outdir + "/grouping")
        gtree = treelib.read_tree(conf.grouping)
        if treelib.is_rooted(gtree):
            treelib.unroot(gtree, newCopy=False)
        gtree.write(outdir + "/grouping", oneline=True,
                    writeData=lambda node: "")
        
        args.extend(["-g", "grouping"])

    # (bifurcating) backbone constraint
    if conf.constraint:
        #shutil.copy(conf.constraint, outdir + "/constraint")
        ctree = treelib.read_tree(conf.constraint)
        if treelib.is_rooted(ctree):
            treelib.unroot(ctree, newCopy=False)
        ctree.write(outdir + "/constraint", oneline=True,
                    writeData=lambda node: "")
        
        args.extend(["-r", "constraint"])
    
    # extra arguments
    if conf.extra:
        args.extend(conf.extra)

    # record command
    cmd = " ".join(args)
    print cmd
    out = open(outdir + "/cmd", "w")
    out.write(cmd)
    out.close()

    # run program
    if run(args, outdir) != 0:
        open(outdir + "/error", "w").close()
        result = 1
    else:

        if conf.boot:
            # perform consensus
            if subprocess.call(
                ["treecons",
                 "-o", outdir + "/RAxML_result.out",
                 "--binary",
                 "-a", basename + conf.alignext,
                 outdir+"/RAxML_bootstrap.out"]) != 0:
                result = 1
                continue
            tree = treelib.read_tree(outdir + "/RAxML_result.out")

        elif conf.fastboot:
            # note: consensus topologies from treecons and RAxML may NOT match
            tree = treelib.read_tree(outdir + "/RAxML_bipartitions.out")

        else:
            tree = treelib.read_tree(outdir + "/RAxML_result.out")

        # reorder tree
        if usertree:
            treelib.reorder_tree(tree, usertree)

        # restore data
        if data:
            tree.write(basename + conf.treeext)
            tree = treelib.read_tree(basename + conf.treeext)

            # copy over data
            for name, val in data.iteritems():
                for key, value in val.iteritems():
                    if key not in tree.nodes[name].data:
                        tree.nodes[name].data[key] = value

        tree.write(basename + conf.treeext)

sys.exit(result)

#!/usr/bin/env python
# run phyml with standard command-line interface

import optparse
import os
import sys

from rasmus import util, treelib
from compbio import phylip, fasta
from compbio import phylorun as phy


o = optparse.OptionParser()
o.add_option("-m", "--model", dest="model", metavar="MODEL")
o.add_option("-n", "--nrates", dest="nrates", metavar="NRATES",
             type="int", default=4)
o.add_option("-a", "--alpha", dest="alpha", metavar="ALPHA",
             default="e")
phy.add_common_options(o)
conf, files = phy.parse_common_options(o)

result = 0
for fn in files:
    basename = phy.get_basename(fn, conf)

    outdir = basename + conf.outputext
    phy.make_output_dir(outdir)
    align = fasta.read_fasta(basename + conf.alignext)
    labels = phylip.write_phylip_align(file(outdir + "/infile", "w"), align,
                                       False)
    util.write_list(file(outdir + "/labels", "w"), labels)

    # require minimium size of alignment
    if len(align) <= 2:
        continue

    # set user tree
    if conf.usertreeext:
        usertree = treelib.read_tree(basename + conf.usertreeext)

        # save data
        data = dict((n.name, n.data) for n in usertree)

        # prepare usertree
        usertree2 = treelib.unroot(usertree, newCopy=True)
        for n in usertree2:
            n.data = {}

        usertree_file = outdir + "/usertree"
        usertree2.write(usertree_file)
    else:
        usertree = None
        usertree_file = "BIONJ"
        data = None

    if conf.seqtype == "dna":
        if conf.model is None:
            conf.model = "HKY"
        args = "'%s/infile' 0 s 1 %d %s e e %d %s %s %s y" % \
               (outdir, conf.boot, conf.model, conf.nrates, conf.alpha,
                usertree_file,
                "ny"[int(conf.opttree)])
    else:
        if conf.model is None:
            conf.model = "JTT"
        args = "'%s/infile' 1 s 1 %d %s e %d %s %s %s y" % \
               (outdir, conf.boot, conf.model, conf.nrates, conf.alpha,
                usertree_file,
                "ny"[int(conf.opttree)])
    cmd = "phyml " + args + " > '%s/out'" % outdir
    print cmd
    out = open(outdir + "/cmd", "w")
    out.write(cmd)
    out.close()
    if os.system(cmd) != 0:
        open(outdir + "/error", "w").close()
        result = 1
    else:
        tree = treelib.read_tree(outdir + "/infile_phyml_tree.txt")

        # reorder tree
        if usertree:
            treelib.reorder_tree(tree, usertree)

        # restore data
        if data:
            tree.write(basename + conf.treeext)
            tree = treelib.read_tree(basename + conf.treeext)

            # copy over data
            for name, val in data.iteritems():
                for key, value in val.iteritems():
                    if key not in tree.nodes[name].data:
                        tree.nodes[name].data[key] = value

        tree.write(basename + conf.treeext)

sys.exit(result)
